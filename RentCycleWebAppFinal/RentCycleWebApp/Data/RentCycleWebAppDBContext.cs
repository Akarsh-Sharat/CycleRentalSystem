// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using RentCycleWebApp.Models;

namespace RentCycleWebApp.Data
{
    public partial class RentCycleWebAppDBContext : DbContext
    {
        public RentCycleWebAppDBContext()
        {
        }

        public RentCycleWebAppDBContext(DbContextOptions<RentCycleWebAppDBContext> options)
            : base(options)
        {
        }

        public virtual DbSet<DeviceModel> DeviceModels { get; set; }
        public virtual DbSet<DeviceRate> DeviceRates { get; set; }
        public virtual DbSet<DeviceShadow> DeviceShadows { get; set; }
        public virtual DbSet<PaymentMode> PaymentModes { get; set; }
        public virtual DbSet<UserAccount> UserAccounts { get; set; }
        public virtual DbSet<UserAccountBalance> UserAccountBalances { get; set; }
        public virtual DbSet<UserCategory> UserCategories { get; set; }
        public virtual DbSet<UserPayment> UserPayments { get; set; }
        public virtual DbSet<UserRideCost> UserRideCosts { get; set; }
        public virtual DbSet<UserRideInfo> UserRideInfos { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<DeviceModel>(entity =>
            {
                entity.ToTable("DeviceModel");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.DeviceModel1)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("DeviceModel");
            });

            modelBuilder.Entity<DeviceRate>(entity =>
            {
                entity.ToTable("DeviceRate");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.DeviceModelId).HasColumnName("DeviceModelID");

                entity.Property(e => e.EffectiveEndDate).HasColumnType("date");

                entity.Property(e => e.EffectiveStartDate).HasColumnType("date");

                entity.Property(e => e.Rate).HasColumnType("money");

                entity.Property(e => e.UserCategoryId).HasColumnName("UserCategoryID");

                entity.HasOne(d => d.DeviceModel)
                    .WithMany(p => p.DeviceRates)
                    .HasForeignKey(d => d.DeviceModelId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DeviceRate_DeviceModel");

                entity.HasOne(d => d.UserCategory)
                    .WithMany(p => p.DeviceRates)
                    .HasForeignKey(d => d.UserCategoryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DeviceRate_UserCategory");
            });

            modelBuilder.Entity<DeviceShadow>(entity =>
            {
                entity.HasKey(e => e.DeviceId);

                entity.ToTable("DeviceShadow");

                entity.Property(e => e.DeviceId)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("DeviceID");

                entity.Property(e => e.DeviceModelId).HasColumnName("DeviceModelID");

                entity.Property(e => e.InOperationFrom).HasColumnType("date");

                entity.Property(e => e.Info)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.LastServicingDate).HasColumnType("date");

                entity.Property(e => e.Location)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Status)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.HasOne(d => d.DeviceModel)
                    .WithMany(p => p.DeviceShadows)
                    .HasForeignKey(d => d.DeviceModelId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DeviceShadow_DeviceModel");
            });

            modelBuilder.Entity<PaymentMode>(entity =>
            {
                entity.ToTable("PaymentMode");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.PaymentMode1)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PaymentMode");
            });

            modelBuilder.Entity<UserAccount>(entity =>
            {
                entity.ToTable("UserAccount");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.Email)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FirstName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LastName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.MobileNumber)
                    .IsRequired()
                    .HasMaxLength(13)
                    .IsUnicode(false);

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.UsercategoryId).HasColumnName("UsercategoryID");
            });

            modelBuilder.Entity<UserAccountBalance>(entity =>
            {
                entity.ToTable("UserAccountBalance");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.BalanceAmount).HasColumnType("money");

                entity.Property(e => e.UserAccountId).HasColumnName("UserAccountID");

                entity.HasOne(d => d.UserAccount)
                    .WithMany(p => p.UserAccountBalances)
                    .HasForeignKey(d => d.UserAccountId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_UserAccountBalance_UserAccount");
            });

            modelBuilder.Entity<UserCategory>(entity =>
            {
                entity.ToTable("UserCategory");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.UserCategory1)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("UserCategory");
            });

            modelBuilder.Entity<UserPayment>(entity =>
            {
                entity.ToTable("UserPayment");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Amount).HasColumnType("money");

                entity.Property(e => e.PaymentDate).HasColumnType("datetime");

                entity.Property(e => e.PaymentModeId).HasColumnName("PaymentModeID");

                entity.Property(e => e.TransactionId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TransactionID");

                entity.Property(e => e.TransactionStatus).HasDefaultValueSql("((1))");

                entity.Property(e => e.UserAccountId).HasColumnName("UserAccountID");

                entity.HasOne(d => d.PaymentMode)
                    .WithMany(p => p.UserPayments)
                    .HasForeignKey(d => d.PaymentModeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_UserPayment_PaymentMode");

                entity.HasOne(d => d.UserAccount)
                    .WithMany(p => p.UserPayments)
                    .HasForeignKey(d => d.UserAccountId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_UserPayment_UserAccount");
            });

            modelBuilder.Entity<UserRideCost>(entity =>
            {
                entity.ToTable("UserRideCost");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Cost).HasColumnType("money");

                entity.Property(e => e.DeviceRateId).HasColumnName("DeviceRateID");

                entity.Property(e => e.UserRideInfoId).HasColumnName("UserRideInfoID");

                entity.HasOne(d => d.DeviceRate)
                    .WithMany(p => p.UserRideCosts)
                    .HasForeignKey(d => d.DeviceRateId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_UserRideCost_DeviceRate");

                entity.HasOne(d => d.UserRideInfo)
                    .WithMany(p => p.UserRideCosts)
                    .HasForeignKey(d => d.UserRideInfoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_UserRideCost_UserRideInfo");
            });

            modelBuilder.Entity<UserRideInfo>(entity =>
            {
                entity.ToTable("UserRideInfo");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.DeviceId)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("DeviceID");

                entity.Property(e => e.EndPosition)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LockTime).HasColumnType("datetime");

                entity.Property(e => e.ScanEndTime).HasColumnType("datetime");

                entity.Property(e => e.ScanStartTime).HasColumnType("datetime");

                entity.Property(e => e.StartPosition)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UnlockTime).HasColumnType("datetime");

                entity.Property(e => e.UserAccountId).HasColumnName("UserAccountID");

                entity.HasOne(d => d.UserAccount)
                    .WithMany(p => p.UserRideInfos)
                    .HasForeignKey(d => d.UserAccountId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_UserRideInfo_UserAccount");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}